// NEW server:
#include <boost/asio.hpp>
#include <fstream>
#include <iostream>
#include <thread>
#include <map>
#include <sstream>
#include <ctime>
#include <filesystem>
namespace fs = std::filesystem;
using boost::asio::ip::tcp;

struct FileMetadata
{
    std::string filename;
    size_t size;
    std::string owner;
    std::string upload_time;
};

std::map<std::string, FileMetadata> file_index_map;
std::map<std::string, std::string> user_credentials; // username -> password

const std::string STORAGE_BASE_DIR = "./storage/";
const std::string INDEX_FILE = "file_index.dat";
const std::string USERS_FILE = "users.dat";

void save_to_index_file()
{
    std::ofstream out(INDEX_FILE);
    if (!out) {
        std::cerr << "Failed to open index file for writing" << std::endl;
        return;
    }
    for (const auto& [filename, meta] : file_index_map) {
        out << filename << "|" << meta.size << "|" << meta.owner << "|" << meta.upload_time << "\n";
    }
    if (!out) {
        std::cerr << "Error writing to index file" << std::endl;
    }
}

void load_index()
{
    std::ifstream in(INDEX_FILE);
    if (!in)
    {
        return;
    }
    std::string line;
    while (std::getline(in, line))
    {
        std::stringstream ss(line);
        std::string filename, size_str, owner, time;

        std::getline(ss, filename, '|');
        std::getline(ss, size_str, '|');
        std::getline(ss, owner, '|');
        std::getline(ss, time, '|');

        try {
            if (filename.empty() || size_str.empty() || owner.empty() || time.empty()) {
                std::cerr << "Skipping malformed line: " << line << std::endl;
                continue;
            }
            size_t size = std::stoul(size_str);
            file_index_map[filename] = { filename, size, owner, time };
        }
        catch (const std::exception& e) {
            std::cerr << "Failed to parse line: " << line << " - Error: " << e.what() << std::endl;
        }
    }
}

void load_users()
{
    std::ifstream in(USERS_FILE);
    if (!in)
    {
        return; // Users file does not exist yet
    }
    std::string line;
    while (std::getline(in, line))
    {
        std::stringstream ss(line);
        std::string username, password;
        std::getline(ss, username, '|');
        std::getline(ss, password, '|');
        if (!username.empty() && !password.empty()) {
            user_credentials[username] = password;
        }
    }
}

void save_users()
{
    std::ofstream out(USERS_FILE);
    if (!out) {
        std::cerr << "Failed to open users file for writing" << std::endl;
        return;
    }
    for (const auto& [username, password] : user_credentials) {
        out << username << "|" << password << "\n";
    }
    if (!out) {
        std::cerr << "Error writing to users file" << std::endl;
    }
}

std::string get_current_time()
{
    std::time_t now = std::time(nullptr);
    char buf[26];
    ctime_s(buf, sizeof(buf), &now);
    std::string time_str(buf);
    time_str.erase(time_str.find_last_not_of("\r\n") + 1);
    return time_str;
}

std::string generateUniqueFilename(const std::string& original, const std::string& username)
{
    std::string base = fs::path(original).stem().string();
    std::string ext = fs::path(original).extension().string();
    std::string candidate = username + "/" + base + ext;

    int counter = 1;
    while (file_index_map.count(candidate) > 0) {
        candidate = username + "/" + base + "_" + std::to_string(counter++) + ext;
    }

    return candidate;
}

void handle_client(tcp::socket socket)
{
    try {
        boost::asio::streambuf buf;
        std::istream is(&buf);
          std::string authenticated_user;

        while (true)
        {
            boost::system::error_code ec;
            boost::asio::read_until(socket, buf, "\n", ec);
            if (ec)
            {
                std::cerr << "Read error: " << ec.message() << std::endl;
                break;
            }

            std::string command;
            std::getline(is, command);
            std::stringstream ss(command);
            std::string op;
            ss >> op;

            if (op == "AUTH") {
                std::string username, password;
                ss >> username >> password;
                if (username.empty() || password.empty()) {
                    boost::asio::write(socket, boost::asio::buffer("AUTH_FAILED Invalid credentials\n"));
                    continue;
                }
                if (user_credentials.find(username) == user_credentials.end()) {
                    // New user, register them
                    user_credentials[username] = password;
                    save_users();
                    fs::create_directories(STORAGE_BASE_DIR + username);
                    authenticated_user = username;
                    boost::asio::write(socket, boost::asio::buffer("AUTH_SUCCESS Welcome, new user " + username + "!\n"));
                }
                else if (user_credentials[username] == password) {
                    // Existing user, correct password
                    authenticated_user = username;
                    boost::asio::write(socket, boost::asio::buffer("AUTH_SUCCESS\n"));
                }
                else {
                    // Existing user, wrong password
                    boost::asio::write(socket, boost::asio::buffer("AUTH_FAILED Incorrect password\n"));
                }
            }
            else if (op == "UPLOAD") {
                if (authenticated_user.empty()) {
                    boost::asio::write(socket, boost::asio::buffer("NOT_AUTHENTICATED\n"));
                    continue;
                }
                std::string filename, owner;
                size_t file_size;
                ss >> filename >> owner >> file_size;
                if (owner != authenticated_user) {
                    boost::asio::write(socket, boost::asio::buffer("PERMISSION_DENIED\n"));
                    continue;
                }
                std::string server_filename = generateUniqueFilename(filename, authenticated_user);
                std::string full_path = STORAGE_BASE_DIR + server_filename;

                std::ofstream out(full_path, std::ios::binary);
                if (!out) {
                    boost::asio::write(socket, boost::asio::buffer("UPLOAD_FAILED\n"));
                    continue;
                }

                size_t received = 0;
                std::vector<char> buffer(1024);
                while (received < file_size) {
                    size_t to_read = std::min(buffer.size(), file_size - received);
                    size_t bytes = boost::asio::read(socket, boost::asio::buffer(buffer.data(), to_read));
                    out.write(buffer.data(), bytes);
                    received += bytes;
                }
                out.close();

                file_index_map[server_filename] = { server_filename, file_size, owner, get_current_time() };
                save_to_index_file();

                boost::asio::write(socket, boost::asio::buffer("UPLOAD_SUCCESS " + server_filename + "\n"));
            }
            else if (op == "DOWNLOAD") {
                if (authenticated_user.empty()) {
                    boost::asio::write(socket, boost::asio::buffer("NOT_AUTHENTICATED\n"));
                    continue;
                }
                std::string filename;
                ss >> filename;

                if (!file_index_map.count(filename) || file_index_map[filename].owner != authenticated_user) {
                    boost::asio::write(socket, boost::asio::buffer("FILE_NOT_FOUND\n"));
                    continue;
                }

                std::ifstream in(STORAGE_BASE_DIR + filename, std::ios::binary);
                if (!in) {
                    boost::asio::write(socket, boost::asio::buffer("FILE_NOT_FOUND\n"));
                    continue;
                }

                in.seekg(0, std::ios::end);
                size_t file_size = in.tellg();
                in.seekg(0, std::ios::beg);

                std::string header = "FILE_SIZE " + std::to_string(file_size) + "\n";
                boost::asio::write(socket, boost::asio::buffer(header));

                std::vector<char> buffer(1024);
                while (in)
                {
                    in.read(buffer.data(), buffer.size());
                    boost::asio::write(socket, boost::asio::buffer(buffer.data(), in.gcount()));
                }
                in.close();
            }
            else if (op == "LIST") {
                if (authenticated_user.empty()) {
                    boost::asio::write(socket, boost::asio::buffer("NOT_AUTHENTICATED\n"));
                    continue;
                }
                std::ostringstream response;
                for (const auto& [filename, meta] : file_index_map)
                {
                    if (meta.owner == authenticated_user) {
                        response << filename << " | " << meta.size << " bytes | " << meta.owner << " | " << meta.upload_time << "\n";
                    }
                }
                response << "LIST_END\n";
                boost::asio::write(socket, boost::asio::buffer(response.str()));
            }
            else if (op == "DELETE") {
                if (authenticated_user.empty()) {
                    boost::asio::write(socket, boost::asio::buffer("NOT_AUTHENTICATED\n"));
                    continue;
                }
                std::string filename;
                ss >> filename;

                if (!file_index_map.count(filename) || file_index_map[filename].owner != authenticated_user) {
                    boost::asio::write(socket, boost::asio::buffer("FILE_NOT_FOUND\n"));
                    continue;
                }

                if (file_index_map.erase(filename)) {
                    std::filesystem::remove(STORAGE_BASE_DIR + filename);
                    save_to_index_file();
                    boost::asio::write(socket, boost::asio::buffer("DELETE_SUCCESS\n"));
                }
                else
                {
                    boost::asio::write(socket, boost::asio::buffer("FILE_NOT_FOUND\n"));
                }
            }
            else {
                boost::asio::write(socket, boost::asio::buffer("INVALID_COMMAND\n"));
            }
        }
    }
    catch (const boost::system::system_error& e) {
        std::cerr << "Client error: " << e.what() << std::endl;
    }
    catch (const std::exception& e) {
        std::cerr << "Standard exception: " << e.what() << std::endl;
    }
    catch (...) {
        std::cerr << "Unknown error occurred" << std::endl;
    }
    socket.close();
}

int main()
{
    try {
        if (!std::filesystem::exists(STORAGE_BASE_DIR))
        {
            if (!std::filesystem::create_directory(STORAGE_BASE_DIR))
            {
                std::cerr << "Failed to create storage base directory" << std::endl;
                return 1;
            }
        }
        load_index();
        load_users();

        boost::asio::io_context io;
        tcp::acceptor acceptor(io, tcp::endpoint(tcp::v4(), 8080));
        std::cout << "Server is running on port 8080...\n";

        while (true)
        {
            tcp::socket socket(io);
            acceptor.accept(socket);
            std::thread(handle_client, std::move(socket)).detach();
        }
    }
    catch (const std::exception& e) {
        std::cerr << "Server error: " << e.what() << std::endl;
        return 1;
    }
    return 0;
}
// client
#include <boost/asio.hpp>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include<filesystem>
namespace fs = std::filesystem;
using boost::asio::ip::tcp;
std::vector<std::string>filenames;
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <boost/asio.hpp>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/err.h>

using boost::asio::ip::tcp;

bool authenticate(tcp::socket& socket, const std::string& username, const std::string& password) {
    std::string command = "AUTH " + username + " " + password + "\n";
    boost::asio::write(socket, boost::asio::buffer(command));

    boost::asio::streambuf response;
    boost::asio::read_until(socket, response, "\n");
    std::istream resp_stream(&response);
    std::string line;
    std::getline(resp_stream, line);

    if (line.find("AUTH_SUCCESS") == 0) {
        std::cout << line.substr(12) << "\n"; // Print welcome message or empty for existing users
        return true;
    }
    else {
        std::cout << line.substr(11) << "\n"; // Print error message
        return false;
    }
}
void upload_file(tcp::socket& socket, const std::string& filename, const std::string& owner) {
    std::ifstream infile(filename, std::ios::binary);
    if (!infile) {
        std::cout << "File not found: " << filename << "\n";
        return;
    }

    infile.seekg(0, std::ios::end);
    size_t file_size = infile.tellg();
    infile.seekg(0, std::ios::beg);

    std::vector<unsigned char> plaintext(file_size);
    infile.read(reinterpret_cast<char*>(plaintext.data()), file_size);
    infile.close();

    std::cout << "Uploading file: " << filename << ", Size: " << file_size << " bytes\n";

    // --- Encryption Part ---
    unsigned char key[32];
    RAND_bytes(key, sizeof(key));
    unsigned char iv[12];
    RAND_bytes(iv, sizeof(iv));

    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    std::vector<unsigned char> ciphertext(file_size + 16);
    int len, ciphertext_len;

    EVP_EncryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, NULL, NULL);
    EVP_EncryptInit_ex(ctx, NULL, NULL, key, iv);
    EVP_EncryptUpdate(ctx, ciphertext.data(), &len, plaintext.data(), plaintext.size());
    ciphertext_len = len;

    EVP_EncryptFinal_ex(ctx, ciphertext.data() + len, &len);
    ciphertext_len += len;

    unsigned char tag[16];
    EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_GET_TAG, 16, tag);
    EVP_CIPHER_CTX_free(ctx);

    std::vector<unsigned char> full_encrypted(iv, iv + 12);
    full_encrypted.insert(full_encrypted.end(), ciphertext.begin(), ciphertext.begin() + ciphertext_len);
    full_encrypted.insert(full_encrypted.end(), tag, tag + 16);

    std::cout << "IV size: " << sizeof(iv) << ", Ciphertext size: " << ciphertext_len
        << ", Tag size: " << sizeof(tag) << ", Total size: " << full_encrypted.size() << "\n";

    // --- Send the header ---
    std::ostringstream header;
    header << "UPLOAD " << filename << " " << owner << " " << full_encrypted.size() << "\n";
    boost::asio::write(socket, boost::asio::buffer(header.str()));

    // --- Send encrypted data ---
    boost::asio::write(socket, boost::asio::buffer(full_encrypted));

    // --- Wait for server response ---
    boost::asio::streambuf response;
    boost::asio::read_until(socket, response, "\n");
    std::istream resp_stream(&response);
    std::string line;
    std::getline(resp_stream, line);

    // Parse server response
    std::stringstream ss(line);
    std::string status, server_filename;
    ss >> status;
    if (status == "UPLOAD_SUCCESS") {
        ss >> server_filename;
        std::cout << "Server response: Upload successful, server filename: " << server_filename << "\n";

        // Create user-specific key directory
        std::string key_dir = "./storage/keys/" + owner;
        fs::create_directories(key_dir);
        
        // Store key locally using server_filename
        std::string key_filename = key_dir + "/" + fs::path(server_filename).filename().string() + ".key";
        std::ofstream key_file(key_filename, std::ios::binary);
        if (!key_file) {
            std::cout << "Failed to create key file: " << key_filename << "\n";
            return;
        }
        key_file.write(reinterpret_cast<char*>(key), sizeof(key));
        key_file.close();
    }
    else if (status == "PERMISSION_DENIED") {
        std::cout << "Server response: Permission denied. Owner must match authenticated user.\n";
    }
    else if (status == "NOT_AUTHENTICATED") {
        std::cout << "Server response: Not authenticated. Please authenticate first.\n";
    }
    else {
        std::cout << "Server response: " << line << "\n";
    }
}

void download_file(tcp::socket& socket, const std::string& filename, const std::string& username) {
    // Construct full server filename (e.g., "newUser/test.txt")
    std::string server_filename = username + "/" + filename;
    std::string command = "DOWNLOAD " + server_filename + "\n";
    boost::asio::write(socket, boost::asio::buffer(command));

    boost::asio::streambuf response;
    boost::asio::read_until(socket, response, "\n");
    std::istream resp_stream(&response);
    std::string header;
    std::getline(resp_stream, header);

    if (header.find("NOT_AUTHENTICATED") != std::string::npos) {
        std::cout << "Server response: Not authenticated. Please authenticate first.\n";
        return;
    }
    if (header.find("FILE_NOT_FOUND") != std::string::npos) {
        std::cout << "File not found on server or you don't have permission.\n";
        return;
    }
    if (header.find("FILE_SIZE ") != 0) {
        std::cout << "Unexpected server response: " << header << "\n";
        return;
    }

    size_t file_size = std::stoul(header.substr(10));
    std::cout << "Downloading file: " << filename << ", Expected size: " << file_size << " bytes\n";

    std::vector<unsigned char> encrypted_data(file_size);
    size_t total_received = 0;
    while (total_received < file_size) {
        size_t bytes = boost::asio::read(socket, boost::asio::buffer(encrypted_data.data() + total_received, file_size - total_received));
        total_received += bytes;
    }

    if (total_received != file_size) {
        std::cout << "File receive incomplete! Received: " << total_received << " bytes\n";
        return;
    }

    // Load key (use server_filename for key path)
    std::string key_path = "./storage/keys/" + server_filename + ".key";
    std::ifstream key_file(key_path, std::ios::binary);
    if (!key_file) {
        std::cout << "Key file not found: " << key_path << "\n";
        return;
    }
    unsigned char key[32];
    key_file.read(reinterpret_cast<char*>(key), sizeof(key));
    key_file.close();

    // Decryption
    if (file_size < 12 + 16) {
        std::cout << "Received data too small to contain IV and tag! Size: " << file_size << "\n";
        return;
    }

    unsigned char iv[12];
    std::copy(encrypted_data.begin(), encrypted_data.begin() + 12, iv);

    unsigned char tag[16];
    std::copy(encrypted_data.end() - 16, encrypted_data.end(), tag);

    std::vector<unsigned char> ciphertext(encrypted_data.begin() + 12, encrypted_data.end() - 16);

    std::cout << "IV size: " << sizeof(iv) << ", Ciphertext size: " << ciphertext.size()
        << ", Tag size: " << sizeof(tag) << "\n";

    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    std::vector<unsigned char> decrypted(ciphertext.size());
    int len, plaintext_len;

    EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, NULL, NULL);
    EVP_DecryptInit_ex(ctx, NULL, NULL, key, iv);
    if (!EVP_DecryptUpdate(ctx, decrypted.data(), &len, ciphertext.data(), ciphertext.size())) {
        unsigned long err = ERR_get_error();
        char err_buf[256];
        ERR_error_string_n(err, err_buf, sizeof(err_buf));
        std::cout << "DecryptUpdate failed! OpenSSL error: " << err_buf << "\n";
        EVP_CIPHER_CTX_free(ctx);
        return;
    }
    plaintext_len = len;

    EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, 16, tag);
    if (EVP_DecryptFinal_ex(ctx, decrypted.data() + len, &len) <= 0) {
        unsigned long err = ERR_get_error();
        char err_buf[256];
        ERR_error_string_n(err, err_buf, sizeof(err_buf));
        std::cout << "DecryptFinal failed! OpenSSL error: " << err_buf << "\n";
        EVP_CIPHER_CTX_free(ctx);
        return;
    }
    plaintext_len += len;
    EVP_CIPHER_CTX_free(ctx);

    // Save decrypted data
    std::ofstream outfile("./storage/" + filename, std::ios::binary);
    if (!outfile) {
        std::cout << "Failed to create output file: ./storage/" + filename << "\n";
        return;
    }
    outfile.write(reinterpret_cast<char*>(decrypted.data()), plaintext_len);
    outfile.close();

    std::cout << "File downloaded and decrypted successfully (" << plaintext_len << " bytes).\n";
}

void list_files(tcp::socket& socket) 

{
    std::string command = "LIST\n";
    boost::asio::write(socket, boost::asio::buffer(command));

    boost::asio::streambuf response;
    while (true) 
    {
        boost::asio::read_until(socket, response, "\n");
        std::istream resp_stream(&response);
        std::string line;
        std::getline(resp_stream, line);
        if (line == "LIST_END") break;
        std::cout << line << "\n";
    }
}

void delete_file(tcp::socket& socket, const std::string& filename) 
{
    std::string command = "DELETE " + filename + "\n";
    boost::asio::write(socket, boost::asio::buffer(command));

    boost::asio::streambuf response;
    boost::asio::read_until(socket, response, "\n");
    std::istream resp_stream(&response);
    std::string line;
    std::getline(resp_stream, line);
    std::cout << "Server response: " << line << "\n";
}

int main() {
    try {
        boost::asio::io_context io_context;
        tcp::resolver resolver(io_context);
        auto endpoints = resolver.resolve("127.0.0.1", "8080");
        tcp::socket socket(io_context);
        boost::asio::connect(socket, endpoints);

        // Create storage and keys directories if they don't exist
        if (!fs::exists("./storage")) {
            fs::create_directory("./storage");
        }
        if (!fs::exists("./storage/keys")) {
            fs::create_directories("./storage/keys");
        }

        // Prompt for username and password
        std::string username, password;
        std::cout << "Enter username: ";
        std::getline(std::cin, username);
        if (username.empty()) {
            std::cout << "Username cannot be empty.\n";
            return 1;
        }
        std::cout << "Enter password: ";
        std::getline(std::cin, password);
        if (password.empty()) {
            std::cout << "Password cannot be empty.\n";
            return 1;
        }

        if (!authenticate(socket, username, password)) {
            return 1;
        }

        std::string command;
        while (true) {
            std::cout << "\nEnter command (UPLOAD <file>, DOWNLOAD <file>, LIST, DELETE <file>, EXIT): ";
            std::getline(std::cin, command);

            std::stringstream ss(command);
            std::string operation;
            ss >> operation;

            if (operation == "UPLOAD") {
                std::string filename;
                if (!(ss >> filename)) {
                    std::cout << "Usage: UPLOAD <filename>\n";
                    continue;
                }
                upload_file(socket, filename, username);
            }
            else if (operation == "DOWNLOAD") {
                std::string filename;
                if (!(ss >> filename)) {
                    std::cout << "Usage: DOWNLOAD <filename>\n";
                    continue;
                }
                download_file(socket, filename, username); // Pass username
            }
            else if (operation == "LIST") {
                list_files(socket);
            }
            else if (operation == "DELETE") {
                std::string filename;
                if (!(ss >> filename)) {
                    std::cout << "Usage: DELETE <filename>\n";
                    continue;
                }
                delete_file(socket, filename);
            }
            else if (operation == "EXIT") {
                break;
            }
            else {
                std::cout << "Invalid command.\n";
            }
        }
    }
    catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << "\n";
        return 1;
    }
    return 0;
}
