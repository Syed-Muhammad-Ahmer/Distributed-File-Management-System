#include <boost/asio.hpp>
#include <fstream>
#include <iostream>
#include <thread>
#include <map>

#include <sstream>
#include <ctime>
#include <filesystem>
namespace fs = std::filesystem;
using boost::asio::ip::tcp;

struct FileMetadata 
{
    std::string filename;
    size_t size;
    std::string owner;
    std::string upload_time;
};

std::map<std::string, FileMetadata> file_index_map;

const std::string STORAGE_DIR = "./storage/";
const std::string INDEX_FILE = "file_index.dat";

void save_index() {
    std::ofstream out(INDEX_FILE);
    if (!out) {
        std::cerr << "Failed to open index file for writing" << std::endl;
        return;
    }
    for (const auto& [filename, meta] : file_index_map) {
        out << filename << "|" << meta.size << "|" << meta.owner << "|" << meta.upload_time << "\n";
    }
    if (!out) {
        std::cerr << "Error writing to index file" << std::endl;
    }
}

void load_index() 
{
    std::ifstream in(INDEX_FILE);
    if (!in) 
    {
        return; // Index file may not exist yet
    }
    std::string line;
    while (std::getline(in, line)) 
    {
        std::stringstream ss(line);
        std::string filename, size_str, owner, time;

        std::getline(ss, filename, '|');
        std::getline(ss, size_str, '|');
        std::getline(ss, owner, '|');
        std::getline(ss, time, '|');

        try {
            if (filename.empty() || size_str.empty() || owner.empty() || time.empty()) {
                std::cerr << "Skipping malformed line: " << line << std::endl;
                continue;
            }
            size_t size = std::stoul(size_str);
            file_index_map[filename] = { filename, size, owner, time };
        }
        catch (const std::exception& e) {
            std::cerr << "Failed to parse line: " << line << " - Error: " << e.what() << std::endl;
        }
    }
}

std::string get_current_time() 
{
    std::time_t now = std::time(nullptr);
    char buf[26];
    ctime_s(buf, sizeof(buf), &now);
    std::string time_str(buf);
    time_str.erase(time_str.find_last_not_of("\r\n") + 1);
    return time_str;
}

std::string generateUniqueFilename(const std::string& original)
{//report.pdf
    std::string base = fs::path(original).stem().string();
    std::string ext = fs::path(original).extension().string();
    std::string candidate = base + ext;

    int counter = 1;
    while (file_index_map.count(candidate) > 0) {
        candidate = base + "_" + std::to_string(counter++) + ext;
    }

    return candidate;
}

void handle_client(tcp::socket socket) 
{
    try {
        boost::asio::streambuf buf;
        std::istream is(&buf);

        while (true) 
        {
            boost::system::error_code ec;
            boost::asio::read_until(socket, buf, "\n", ec);
            if (ec) 
            {
                std::cerr << "Read error: " << ec.message() << std::endl;
                break;
            }

            std::string command;
            std::getline(is, command);
            std::stringstream ss(command);
            std::string op;
            ss >> op;

             if (op == "UPLOAD") {
                std::string filename, owner;
                size_t file_size;
                ss >> filename >> owner >> file_size;
                std::string server_filename = generateUniqueFilename(filename);

                std::ofstream out(STORAGE_DIR + server_filename, std::ios::binary);
                if (!out) {
                    boost::asio::write(socket, boost::asio::buffer("UPLOAD_FAILED\n"));
                    continue;
                }

                size_t received = 0;
                std::vector<char> buffer(1024);
                while (received < file_size) {
                    size_t to_read = std::min(buffer.size(), file_size - received);
                    size_t bytes = boost::asio::read(socket, boost::asio::buffer(buffer.data(), to_read));
                    out.write(buffer.data(), bytes);
                    received += bytes;
                }
                out.close();

                // Update your index map if needed
                //file_index_map[filename] = owner;
                file_index_map[server_filename] = { server_filename, file_size, owner, get_current_time() };
                save_index();

                boost::asio::write(socket, boost::asio::buffer("UPLOAD_SUCCESS\n"));
            }

            else if (op == "DOWNLOAD") {
                std::string filename;
                ss >> filename;

                std::ifstream in(STORAGE_DIR + filename, std::ios::binary);
                {
                   
                    if (!file_index_map.count(filename) || !in) {
                        boost::asio::write(socket, boost::asio::buffer("FILE_NOT_FOUND\n"));
                        continue;
                    }
                }
                //get file size
                in.seekg(0, std::ios::end);
                size_t file_size = in.tellg();
                in.seekg(0, std::ios::beg);
                //send data
                std::string header = "FILE_SIZE " + std::to_string(file_size) + "\n";
                boost::asio::write(socket, boost::asio::buffer(header));

                std::vector<char> buffer(1024);
                while (in) 
                {
                    in.read(buffer.data(), buffer.size());
                    boost::asio::write(socket, boost::asio::buffer(buffer.data(), in.gcount()));
                }
                in.close();
            }
            else if (op == "LIST") {
                std::ostringstream response;
                {
                    for (const auto& [filename, meta] : file_index_map) 
                    {
                        response << filename << " | " << meta.size << " bytes | " << meta.owner << " | " << meta.upload_time << "\n";
                    }
                }
                response << "LIST_END\n";
                boost::asio::write(socket, boost::asio::buffer(response.str()));
            }
            else if (op == "DELETE") {
                std::string filename;
                ss >> filename;

                if (file_index_map.erase(filename)) {
                    std::filesystem::remove(STORAGE_DIR + filename);
                    save_index();
                    boost::asio::write(socket, boost::asio::buffer("DELETE_SUCCESS\n"));
                }
                else 
                {
                    boost::asio::write(socket, boost::asio::buffer("FILE_NOT_FOUND\n"));
                }
            }
            else {
                boost::asio::write(socket, boost::asio::buffer("INVALID_COMMAND\n"));
            }
        }
    }
    catch (const boost::system::system_error& e) {
        std::cerr << "Client error: " << e.what() << std::endl;
    }
    catch (const std::exception& e) {
        std::cerr << "Standard exception: " << e.what() << std::endl;
    }
    catch (...) {
        std::cerr << "Unknown error occurred" << std::endl;
    }
    socket.close();
}
int main() 
{
    try {
        if (!std::filesystem::exists(STORAGE_DIR)) 
        {
            if (!std::filesystem::create_directory(STORAGE_DIR)) 
            {
                std::cerr << "Failed to create storage directory" << std::endl;
                return 1;
            }
        }
        load_index();

        boost::asio::io_context io;
        tcp::acceptor acceptor(io, tcp::endpoint(tcp::v4(), 8080));
        std::cout << "Server is running on port 8080...\n";

        while (true) 
        {
            tcp::socket socket(io);
            acceptor.accept(socket);
            std::thread(handle_client, std::move(socket)).detach();
        }
    }
    catch (const std::exception& e) {
        std::cerr << "Server error: " << e.what() << std::endl;
        return 1;
    }
    return 0;
}
